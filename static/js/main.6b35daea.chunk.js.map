{"version":3,"sources":["constants.js","hooks/useInput/index.js","hooks/useValidator/index.js","styled/utils.js","styled/index.js","styled/common.js","components/NewListForm/styles.js","components/NewListForm/index.js","components/List/styles.js","components/List/index.js","components/TaskForm/styles.js","components/TaskForm/index.js","components/Task/styles.js","components/Task/index.js","store/actions.js","containers/Tasks/actions.js","containers/Tasks/reducer.js","containers/Tasks/index.js","containers/Tasks/selectors.js","containers/Lists/actions.js","containers/Lists/reducer.js","containers/Lists/index.js","store/reducer.js","store/index.js","components/Header/index.js","containers/App/index.js","index.js"],"names":["texts","useInput","initialInputValue","_useState","useState","_useState2","Object","slicedToArray","value","setValue","event","target","useValidator","validateFunc","onSuccess","error","setError","validation","breakpoints","lg","md","sm","mediaFactory","operator","keys","reduce","acc","label","css","_templateObject","apply","arguments","media","min","max","colors","GlobalStyles","createGlobalStyle","styled_templateObject","_templateObject2","Input","styled","input","common_templateObject","_ref","Button","button","common_templateObject2","ErrorDisplay","p","_templateObject3","NewListContainer","div","styles_templateObject","ButtonsContainer","styles_templateObject2","NewListInput","styles_templateObject3","NewListButton","_templateObject4","NewListForm","onConfirm","validate","focused","setFocused","_useInput","_useInput2","name","setName","resetName","_useValidator","_useValidator2","reset","_len","length","args","Array","_key","forEach","arg","call","useReset","react_default","a","createElement","type","placeholder","onChange","onFocus","onClick","NameContainer","List_styles_templateObject","EditButton","span","List_styles_templateObject2","ListContainer","List_styles_templateObject3","ListName","h2","styles_templateObject4","EditableListName","_templateObject5","ConfirmEditButton","_templateObject6","List","children","validateEdit","onUpdate","editMode","setEditMode","nameValue","resetError","react","NewTaskContainer","TaskForm_styles_templateObject","TaskForm_styles_templateObject2","NewTaskInput","TaskForm_styles_templateObject3","NewTaskButton","TaskForm_styles_templateObject4","noop","TaskForm","initialValues","_ref$onResign","onResign","isEdit","Boolean","title","setTitle","resetTitle","_useInput3","description","_useInput4","setDescription","resetDescription","as","styles_ButtonsContainer","Title","h4","Task_styles_templateObject","Description","Task_styles_templateObject2","Container","Task_styles_templateObject3","Task_styles_templateObject4","Task","_ref$description","components_TaskForm","values","styles_EditButton","createAction","payload","actions","byId","createReducer","_createReducer","defineProperty","state","objectSpread","id","_ref2","combineReducers","withConnect","connect","listId","tasks","list","lists","map","taskId","dispatch","addNewTask","uuid","actionAddTask","updateTask","actionUpdateTask","validateTaskTitle","Tasks_templateObject","Tasks","Tasks_Container","task","components_Task","assign","key","propTypes","items","PropTypes","array","isRequired","string","reducer_createReducer","params","esm_extends","index","listInitialState","_ref3","_ref3$payload","taskActions","_ref4","_ref4$payload","concat","Lists_templateObject","addNewList","listName","updateListName","actionUpdateListName","validateListName","Lists","Lists_Container","_lists$id","components_List","newName","containers_Tasks","components_NewListForm","ListsReducer","TasksReducer","middlewares","thunk","enhancers","applyMiddleware","persistConfig","storage","composeEnhancers","compose","persistedReducer","persistReducer","reducer","store","createStore","persistor","persistStore","h1","Header_templateObject","TitleBold","Header_templateObject2","Header","Header_Title","App_templateObject","App","App_Container","components_Header","integration_react","containers_Lists","ReactDOM","render","es","containers_App","document","getElementById"],"mappings":"sOAAMA,EACa,+BADbA,EAEgB,eAFhBA,EAGe,2CAHfA,EAIkB,gCAJlBA,EAKqB,eALrBA,EAM2B,kBAN3BA,EAOsB,aAPtBA,EAQ4B,mBAR5BA,EASM,SATNA,EAUW,SAVXA,EAWQ,OAXRA,EAYc,OAZdA,EAae,cCDNC,EAVE,SAAAC,GAAqB,IAAAC,EACVC,mBAASF,GADCG,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC7BK,EAD6BH,EAAA,GACtBI,EADsBJ,EAAA,GAOpC,MAAO,CAACG,EAJY,SAAAE,GAAK,OAAID,EAASC,EAAMC,OAAOH,QAErC,kBAAMC,EAASP,MCUhBU,EAfM,SAACC,EAAcC,GAAc,IAAAX,EACtBC,mBAAS,IADaC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACzCY,EADyCV,EAAA,GAClCW,EADkCX,EAAA,GAYhD,MAAO,CAACU,EAVS,SAAAP,GACf,IAAMS,EAAaJ,EAAaL,GAChC,OAAIS,GACFD,EAASC,IACF,IAETH,EAAUN,IACH,IAEK,kBAAMQ,EAAS,4ICX/B,IAAME,EAAc,CAElBC,GAAI,KACJC,GAAI,IACJC,GAAI,KAGAC,EAAe,SAAAC,GAAQ,OAC3BjB,OAAOkB,KAAKN,GAAaO,OAAO,SAACC,EAAKC,GAOpC,OANAD,EAAIC,GAAS,kBAAaC,YAAbC,IACDN,EAAmBL,EAAYS,GACrCC,IAAGE,WAAH,EAAAC,aAICL,GACN,KAECM,EAAQ,CACZC,IAAKX,EAAa,OAClBY,IAAKZ,EAAa,+UClBpB,IAAMa,EACQ,UADRA,EAEQ,UAFRA,EAIC,MAGDC,EAAeC,YAAHC,IAEHH,EACWA,EAGlBH,EAAME,IAAId,GANAmB,iiBCRlB,IAAMC,EAAQC,IAAOC,MAAVC,IAGAR,EAEQ,SAAAS,GAAA,OAAAA,EAAG7B,MAAqBoB,EAAaA,IAOlDU,EAASJ,IAAOK,OAAVC,IAEDZ,GAMLa,EAAeP,IAAOQ,EAAVC,IAEPf,kbCtBX,IAAMgB,EAAmBV,IAAOW,IAAVC,KAMhBC,EAAmBb,IAAOW,IAAVG,KAKhBC,EAAef,YAAOD,EAAPC,CAAHgB,KAIZC,GAAgBjB,YAAOI,EAAPJ,CAAHkB,KC+CJC,GA9CK,SAAAhB,GAA2C,IAAxCiB,EAAwCjB,EAAxCiB,UAAqBhD,EAAmB+B,EAA7BkB,SAA6B3D,EAC/BC,oBAAS,GADsBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACtD4D,EADsD1D,EAAA,GAC7C2D,EAD6C3D,EAAA,GAAA4D,EAE1BhE,EAAS,IAFiBiE,EAAA5D,OAAAC,EAAA,EAAAD,CAAA2D,EAAA,GAEtDE,EAFsDD,EAAA,GAEhDE,EAFgDF,EAAA,GAEvCG,EAFuCH,EAAA,GAAAI,EAGvB1D,EAAaC,EAAcgD,GAHJU,EAAAjE,OAAAC,EAAA,EAAAD,CAAAgE,EAAA,GAGtDvD,EAHsDwD,EAAA,GAG/CT,EAH+CS,EAAA,GAIvDC,EARS,mBAAAC,EAAA1C,UAAA2C,OAAIC,EAAJ,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAIF,EAAJE,GAAA9C,UAAA8C,GAAA,OAAa,WAC5BF,EAAKG,QAAQ,SAAAC,GAAG,OAAIA,EAAIC,UAOVC,CAASZ,EAJsCE,EAAA,IAM7D,OACEW,EAAAC,EAAAC,cAACjC,EAAD,KACGpC,GAASmE,EAAAC,EAAAC,cAACpC,EAAD,KAAejC,GACzBmE,EAAAC,EAAAC,cAAC5B,EAAD,CACE6B,KAAK,OACLC,YAAatF,EACbQ,MAAO2D,EACPoB,SAAUnB,EACVoB,QAAS,kBAAMxB,GAAW,IAC1BjD,MAAOA,IAERgD,GACCmB,EAAAC,EAAAC,cAAC9B,EAAD,KACE4B,EAAAC,EAAAC,cAAC1B,GAAD,CACE+B,QAAS,WACH3B,EAASK,KACXK,IACAR,GAAW,MAGdhE,GAEHkF,EAAAC,EAAAC,cAAC1B,GAAD,CACE+B,QAAS,WACPzB,GAAW,GACXQ,MAEDxE,q3BCjDb,IAAM0F,GAAgBjD,IAAOW,IAAVuC,MAIbC,GAAanD,IAAOoD,KAAVC,MAQVC,GAAgBtD,IAAOW,IAAV4C,MASbC,GAAWxD,IAAOyD,GAAVC,MAMRC,GAAmB3D,YAAOD,EAAPC,CAAH4D,MAMhBC,GAAoB7D,YAAOI,EAAPJ,CAAH8D,MCuBRC,GA3CF,SAAA5D,GAAgD,IAA7CuB,EAA6CvB,EAA7CuB,KAAMsC,EAAuC7D,EAAvC6D,SAAUC,EAA6B9D,EAA7B8D,aAAcC,EAAe/D,EAAf+D,SAAexG,EAC3BC,oBAAS,GADkBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACpDyG,EADoDvG,EAAA,GAC1CwG,EAD0CxG,EAAA,GAAA4D,EAE9BhE,EAASkE,GAFqBD,EAAA5D,OAAAC,EAAA,EAAAD,CAAA2D,EAAA,GAEpD6C,EAFoD5C,EAAA,GAEzCE,EAFyCF,EAAA,GAAAI,EAGrB1D,EAAa8F,EAAcC,GAHNpC,EAAAjE,OAAAC,EAAA,EAAAD,CAAAgE,EAAA,GAGpDvD,EAHoDwD,EAAA,GAG7CT,EAH6CS,EAAA,GAGnCwC,EAHmCxC,EAAA,GAK3D,OACEW,EAAAC,EAAAC,cAACW,GAAD,KACGhF,GAASmE,EAAAC,EAAAC,cAACpC,EAAD,KAAejC,GACzBmE,EAAAC,EAAAC,cAACM,GAAD,KACGkB,EACC1B,EAAAC,EAAAC,cAAC4B,EAAA,SAAD,KACE9B,EAAAC,EAAAC,cAACgB,GAAD,CAAkB5F,MAAOsG,EAAWvB,SAAUnB,IAC9Cc,EAAAC,EAAAC,cAACkB,GAAD,CACEb,QAAS,WACH3B,EAASgD,KACXD,GAAY,GACZE,OAGH/G,IAILkF,EAAAC,EAAAC,cAACa,GAAD,KACG9B,EACDe,EAAAC,EAAAC,cAACQ,GAAD,CAAYH,QAAS,kBAAMoB,GAAY,KACpC7G,KAKRyG,qhBC3CP,IAAMQ,GAAmBxE,IAAOW,IAAV8D,MAKhB5D,GAAmBb,IAAOW,IAAV+D,MAKhBC,GAAe3E,YAAOD,EAAPC,CAAH4E,KAKLlF,GAIPmF,GAAgB7E,YAAOI,EAAPJ,CAAH8E,MCRbC,GAAO,aA6EEC,GAvEE,SAAA7E,GAKX,IAJJiB,EAIIjB,EAJJiB,UACUhD,EAGN+B,EAHJkB,SACA4D,EAEI9E,EAFJ8E,cAEIC,EAAA/E,EADJgF,gBACI,IAAAD,EADOH,GACPG,EACEE,EAASC,QAAQJ,GADnBvH,EAE0BC,mBAASyH,GAFnCxH,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEG4D,EAFH1D,EAAA,GAEY2D,EAFZ3D,EAAA,GAAA4D,EAGkChE,EACpC4H,EAASH,EAAcK,MAAQ,IAJ7B7D,EAAA5D,OAAAC,EAAA,EAAAD,CAAA2D,EAAA,GAGG8D,EAHH7D,EAAA,GAGU8D,EAHV9D,EAAA,GAGoB+D,EAHpB/D,EAAA,GAAAgE,EAMoDjI,EACtD4H,EAASH,EAAcS,YAAc,IAPnCC,EAAA9H,OAAAC,EAAA,EAAAD,CAAA4H,EAAA,GAMGC,EANHC,EAAA,GAMgBC,EANhBD,EAAA,GAMgCE,EANhCF,EAAA,GAAA9D,EASkC1D,EAAaC,EAAc,kBAC/DgD,EAAU,CAAEkE,QAAOI,kBAVjB5D,EAAAjE,OAAAC,EAAA,EAAAD,CAAAgE,EAAA,GASGvD,EATHwD,EAAA,GASUT,EATVS,EAAA,GAYEC,EArBS,mBAAAC,EAAA1C,UAAA2C,OAAIC,EAAJ,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAIF,EAAJE,GAAA9C,UAAA8C,GAAA,OAAa,WAC5BF,EAAKG,QAAQ,SAAAC,GAAG,OAAIA,EAAIC,UAoBVC,CAASgD,EAZnB1D,EAAA,GAY2C+D,GAE/C,OACEpD,EAAAC,EAAAC,cAAC6B,GAAD,KACGlG,GAASmE,EAAAC,EAAAC,cAACpC,EAAD,KAAejC,GACzBmE,EAAAC,EAAAC,cAACgC,GAAD,CACE9B,YACEuC,EACI7H,EACAA,EAENqF,KAAK,OACL7E,MAAOuH,EACPxC,SAAUyC,EACVxC,QAAS,kBAAMxB,GAAW,MAE3BD,GACCmB,EAAAC,EAAAC,cAAC4B,EAAA,SAAD,KACE9B,EAAAC,EAAAC,cAACgC,GAAD,CACE9B,YACEuC,EACI7H,EACAA,EAENuI,GAAG,WACH/H,MAAO2H,EACP5C,SAAU8C,IAEZnD,EAAAC,EAAAC,cAACoD,GAAD,KACEtD,EAAAC,EAAAC,cAACkC,GAAD,CAAe7B,QAAS,kBAAM3B,EAASiE,IAAUvD,MAC9CxE,GAEHkF,EAAAC,EAAAC,cAACkC,GAAD,CACE7B,QAAS,WACPzB,GAAW,GACXQ,IACAoD,MAED5H,wkBCxEf,OAAMyI,GAAQhG,IAAOiG,GAAVC,KACAxG,GAILyG,GAAcnG,IAAOQ,EAAV4F,KACN1G,GAIL2G,GAAYrG,IAAOW,IAAV2F,KAEO5G,GAMhByD,GAAanD,YAAOI,EAAPJ,CAAHuG,KAKL7G,GCSI8G,GA5BF,SAAArG,GAAqD,IAAlDmF,EAAkDnF,EAAlDmF,MAAkDmB,EAAAtG,EAA3CuF,mBAA2C,IAAAe,EAA7B,GAA6BA,EAAzBvC,EAAyB/D,EAAzB+D,SAAU7C,EAAelB,EAAfkB,SAAe3D,EAChCC,oBAAS,GADuBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACzDyG,EADyDvG,EAAA,GAC/CwG,EAD+CxG,EAAA,GAGhE,OAAOuG,EACL1B,EAAAC,EAAAC,cAAC+D,GAAD,CACEtF,UAAW,SAAAuF,GAAM,OAAIzC,EAASyC,IAAWvC,GAAY,IACrDe,SAAU,kBAAMf,GAAY,IAC5B/C,SAAUA,EACV4D,cAAe,CAAEK,QAAOI,iBAG1BjD,EAAAC,EAAAC,cAAC0D,GAAD,KACE5D,EAAAC,EAAAC,cAACqD,GAAD,KAAQV,GACR7C,EAAAC,EAAAC,cAACwD,GAAD,KAAcT,GACdjD,EAAAC,EAAAC,cAACiE,GAAD,CAAY5D,QAAS,kBAAMoB,GAAY,KACpC7G,iCCvBHsJ,GAAe,SAACjE,EAAMkE,GAAP,MAAoB,CAAElE,OAAMkE,YCG3CC,GACM,YADNA,GAES,gCCCTC,GAAOC,yBAFa,IAEAC,GAAA,GAAArJ,OAAAsJ,GAAA,EAAAtJ,CAAAqJ,GACvBH,GADuB,SACLK,EADKjH,GACe,IAAX2G,EAAW3G,EAAX2G,QAC1B,OAAOjJ,OAAAwJ,GAAA,EAAAxJ,CAAA,GACFuJ,EADLvJ,OAAAsJ,GAAA,EAAAtJ,CAAA,GAEGiJ,EAAQQ,GAAKR,MAJMjJ,OAAAsJ,GAAA,EAAAtJ,CAAAqJ,GAOvBH,GAPuB,SAOFK,EAPEG,GAOkB,IAAXT,EAAWS,EAAXT,QAC7B,OAAOjJ,OAAAwJ,GAAA,EAAAxJ,CAAA,GACFuJ,EADLvJ,OAAAsJ,GAAA,EAAAtJ,CAAA,GAEGiJ,EAAQQ,GAFXzJ,OAAAwJ,GAAA,EAAAxJ,CAAA,GAGOuJ,EAAMN,EAAQQ,IACdR,OAZeI,KAkBXM,eAAgB,CAAER,iFCbjC,IAAMS,GAAcC,YCXQ,SAACN,EAADjH,GAAuB,IAAbwH,EAAaxH,EAAbwH,OAChCC,EAAQ,GACNC,EAAOT,EAAMU,MAAMd,KAAKW,GAI9B,OAHIE,IACFD,EAAQC,EAAKD,MAAMG,IAAI,SAAAC,GAAM,OAAIZ,EAAMQ,MAAMZ,KAAKgB,MAE7C,CAAEJ,UDOT,SAACK,EAAD9H,GAAA,IAAawH,EAAbxH,EAAawH,OAAb,MAA2B,CACzBO,WAAY,SAAAvB,GAAM,OAAIsB,EFNJ,SAACN,EAAQhB,GAAT,OACpBE,GAAaE,GAADlJ,OAAAwJ,GAAA,EAAAxJ,CAAA,CAAqByJ,GAAIa,OAAQR,UAAWhB,IEKvByB,CAAcT,EAAQhB,KACrD0B,WAAY,SAACf,EAAIX,GAAL,OAAgBsB,EFJP,SAACX,EAAIX,GAAL,OACvBE,GAAaE,GAADlJ,OAAAwJ,GAAA,EAAAxJ,CAAA,CAAwByJ,MAAOX,IEGJ2B,CAAiBhB,EAAIX,QAIxD4B,GAAoB,SAAAxK,GACxB,OAAKA,EACE,KADYR,GAIf8I,GAAYrG,IAAOW,IAAV6H,MAETC,GAAQhB,GAAY,SAAAF,GAAA,IAAGK,EAAHL,EAAGK,MAAOM,EAAVX,EAAUW,WAAYG,EAAtBd,EAAsBc,WAAtB,OACxB5F,EAAAC,EAAAC,cAAC+F,GAAD,KACGd,EAAMG,IAAI,SAAAY,GAAI,OACblG,EAAAC,EAAAC,cAACiG,GAAD/K,OAAAgL,OAAA,GACMF,EADN,CAEEG,IAAKH,EAAKrB,GACVjG,SAAUkH,GACVrE,SAAU,SAAAyC,GAAM,OAAI0B,EAAWM,EAAKrB,GAAIX,SAG5ClE,EAAAC,EAAAC,cAAC+D,GAAD,CAAUtF,UAAW8G,EAAY7G,SAAUkH,QAI/CE,GAAMM,UAAY,CAChBC,MAAOC,KAAUC,MAAMC,WACvBxB,OAAQsB,KAAUG,OAAOD,YAKZV,aE5CT1B,GACM,YADNA,GAES,wBCQTC,GAAOC,yBARa,IAQAoC,GAAA,GAAAxL,OAAAsJ,GAAA,EAAAtJ,CAACwL,GACxBtC,GADuB,SACLK,EADKG,GACe,IAAXT,EAAWS,EAAXT,QAC1B,OAAOjJ,OAAAwJ,GAAA,EAAAxJ,CAAA,GACFuJ,EADLvJ,OAAAsJ,GAAA,EAAAtJ,CAAA,GAEGiJ,EAAQQ,GAVU,SAAAnH,GAAA,IAAMmJ,EAANzL,OAAA0L,GAAA,EAAA1L,CAAA,GAAAsC,GAAA,OAAAtC,OAAAwJ,GAAA,EAAAxJ,CAAA,CACvB+J,MAAO,GACP4B,MAAO,GACJF,GAOeG,CAAiB3C,OAJXjJ,OAAAsJ,GAAA,EAAAtJ,CAACwL,GAOxBtC,GAPuB,SAQtBK,EARsBsC,GAYtB,IAAAC,EAAAD,EAFE5C,QAAWQ,EAEbqC,EAFarC,GAAI5F,EAEjBiI,EAFiBjI,KAGjB,OAAO7D,OAAAwJ,GAAA,EAAAxJ,CAAA,GACFuJ,EADLvJ,OAAAsJ,GAAA,EAAAtJ,CAAA,GAEGyJ,EAFHzJ,OAAAwJ,GAAA,EAAAxJ,CAAA,GAGOuJ,EAAME,GAHb,CAII5F,aAjBkB7D,OAAAsJ,GAAA,EAAAtJ,CAACwL,GAqBxBO,GArBuB,SAsBtBxC,EAtBsByC,GA0BtB,IAAAC,EAAAD,EAFE/C,QAAWa,EAEbmC,EAFanC,OAAYK,EAEzB8B,EAFqBxC,GAGrB,OAAOzJ,OAAAwJ,GAAA,EAAAxJ,CAAA,GACFuJ,EADLvJ,OAAAsJ,GAAA,EAAAtJ,CAAA,GAEG8J,EAFH9J,OAAAwJ,GAAA,EAAAxJ,CAAA,GAGOuJ,EAAMO,GAHb,CAIIC,MAAOR,EAAMO,GAAQC,MAAMmC,OAAO/B,SA/BhBqB,KAqCX7B,eAAgB,CAAER,wLCvCjC,IAAMX,GAAYrG,IAAOW,IAAVqJ,MAOTvC,GAAcC,YAClB,SAAAN,GAAK,MAAK,CAAEU,MAAOV,EAAMU,MAAMd,OAC/B,SAAAiB,GAAQ,MAAK,CACXgC,WAAY,SAAAC,GAAQ,OAAIjC,GFbNvG,EEa6BwI,EFZjDrD,GAAaE,GAAkB,CAAEO,GAAIa,OAAQzG,WADzB,IAAAA,GEclByI,eAAgB,SAAC7C,EAAI4C,GAAL,OACdjC,EFZuB,SAACX,EAAI5F,GAAL,OAC3BmF,GAAaE,GAAqB,CAAEO,KAAI5F,SEW3B0I,CAAqB9C,EAAI4C,QAIlCG,GAAmB,SAAAtM,GACvB,OAAKA,EACDA,EAAMkE,OAAS,GAAW1E,EACvB,KAFYA,GAyBN+M,GApBD7C,GAAY,SAAAtH,GAAA,IAAG2H,EAAH3H,EAAG2H,MAAOmC,EAAV9J,EAAU8J,WAAYE,EAAtBhK,EAAsBgK,eAAtB,OACxB1H,EAAAC,EAAAC,cAAC4H,GAAD,KACG1M,OAAOkB,KAAK+I,GAAOC,IAAI,SAAAT,GAAM,IAAAkD,EACJ1C,EAAMR,GAAtB5F,EADoB8I,EACpB9I,KAAMkG,EADc4C,EACd5C,MACd,OACEnF,EAAAC,EAAAC,cAAC8H,GAAD,CACE/I,KAAMA,EACNoH,IAAKxB,EACLpD,SAAU,SAAAwG,GAAO,OAAIP,EAAe7C,EAAIoD,IACxCzG,aAAcoG,IACd5H,EAAAC,EAAAC,cAACgI,GAAD,CAAO3B,MAAOpB,EAAOD,OAAQL,OAInC7E,EAAAC,EAAAC,cAACiI,GAAD,CAAaxJ,UAAW6I,EAAY5I,SAAUgJ,QC3CnC7C,eAAgB,CAC7BM,MAAO+C,GACPjD,MAAOkD,KCCHC,GAAc,CAACC,KACfC,GAAY,CAACC,IAAe7L,WAAf,EAAmB0L,KAEhCI,GAAgB,CACpBrC,IAAK,WACLsC,aAIIC,GAOAC,IAGAC,GAAmBC,YAAeL,GAAeM,IACjDC,GAAQC,YAAYJ,GAAkB,GAAIF,GAAgBhM,WAAhB,EAAoB4L,KAC9DW,GAAYC,YAAaH,IAEhBA,yPC1Bf,IAAM1F,GAAQhG,IAAO8L,GAAVC,MAMLC,GAAYhM,IAAOoD,KAAV6I,MAWAC,GAPA,kBACbzJ,EAAAC,EAAAC,cAACwJ,GAAD,KACE1J,EAAAC,EAAAC,cAACqJ,GAAD,KAAYzO,GACXA,2ECRL,IAAM8I,GAAYrG,IAAOW,IAAVyL,MAYAC,GAVH,kBACV5J,EAAAC,EAAAC,cAAC2J,GAAD,KACE7J,EAAAC,EAAAC,cAAChD,EAAD,MACA8C,EAAAC,EAAAC,cAAC4J,GAAD,MACA9J,EAAAC,EAAAC,cAAC6J,GAAA,EAAD,CAAaZ,UAAWA,IACtBnJ,EAAAC,EAAAC,cAAC8J,GAAD,SCTNC,IAASC,OACPlK,EAAAC,EAAAC,cAACiK,EAAA,EAAD,CAAUlB,MAAOA,IACfjJ,EAAAC,EAAAC,cAACkK,GAAD,OAEFC,SAASC,eAAe","file":"static/js/main.6b35daea.chunk.js","sourcesContent":["const texts = {\n  NewListErrorEmpty: `List name shouldn't be empty`,\n  NewListPlaceholder: 'Add new list',\n  NewListErrorTooLong: `List name shouldn't exceed 30 characters`,\n  NewTaskErrorTitleEmpty: `Task title shouldn't be empty`,\n  NewTaskTitlePlaceholder: 'Add new task',\n  NewTaskDescriptionPlaceholder: 'Add description',\n  EditTaskTitlePlaceholder: 'Edit title',\n  EditTaskDescriptionPlaceholder: 'Edit description',\n  ButtonOK: '✓',\n  ButtonDecline: '✕',\n  ButtonEdit: 'edit',\n  AppNameFirstPart: 'Trel',\n  AppNameSecondPart: 'like',\n}\n\nexport { texts }\n","import { useState } from 'react'\n\nconst useInput = initialInputValue => {\n  const [value, setValue] = useState(initialInputValue)\n\n  const setNewValue = event => setValue(event.target.value)\n\n  const reset = () => setValue(initialInputValue)\n\n  return [value, setNewValue, reset]\n}\n\nexport default useInput\n","import { useState } from 'react'\n\nconst useValidator = (validateFunc, onSuccess) => {\n  const [error, setError] = useState('')\n  const validate = value => {\n    const validation = validateFunc(value)\n    if (validation) {\n      setError(validation)\n      return false\n    }\n    onSuccess(value) // When there is a one-value input, we can pass the function right away\n    return true\n  }\n  const reset = () => setError('')\n  return [error, validate, reset]\n}\n\nexport default useValidator\n","import { css } from 'styled-components'\n\nconst breakpoints = {\n  // xl: 1799, // large desktop\n  lg: 1199, // small desktop\n  md: 991, // tablet\n  sm: 767, // phone\n}\n\nconst mediaFactory = operator =>\n  Object.keys(breakpoints).reduce((acc, label) => {\n    acc[label] = (...args) => css`\n      @media (${operator}-width: ${breakpoints[label]}px) {\n        ${css(...args)};\n      }\n    `\n\n    return acc\n  }, {})\n\nconst media = {\n  min: mediaFactory('min'),\n  max: mediaFactory('max'),\n}\n\nexport { media }\n","import { createGlobalStyle } from 'styled-components'\n\nimport { media } from './utils'\n\nconst colors = {\n  dirtyWhite: '#F5F5ED',\n  lightBlack: '#1f1f1f',\n  gray: '#aEaEaE',\n  red: 'red',\n}\n\nconst GlobalStyles = createGlobalStyle`\n    body {\n      color: ${colors.dirtyWhite};\n      background-color: ${colors.lightBlack};\n      font-family: \"Roboto\", sans-serif;\n      font-size: 16px;\n      ${media.max.md`\n        font-size: 12px;      \n      `}\n    }\n  `\n\nexport { GlobalStyles, colors, media }\n","import styled from 'styled-components'\nimport { colors } from '.'\n\nconst Input = styled.input`\n  outline: none;\n  background-color: transparent;\n  color: ${colors.dirtyWhite};\n  border: none;\n  border-bottom: ${({ error }) => (error ? colors.red : colors.dirtyWhite)} 1px\n    solid;\n  &:focus {\n    border-bottom-width: 2px;\n  }\n`\n\nconst Button = styled.button`\n  background-color: transparent;\n  color: ${colors.dirtyWhite};\n  outline: none;\n  border: none;\n  cursor: pointer;\n`\n\nconst ErrorDisplay = styled.p`\n  font-size: 0.75em;\n  color: ${colors.red};\n  margin: 0;\n`\n\nexport { Input, Button, ErrorDisplay }\n","import styled from 'styled-components'\nimport { Input, Button, ErrorDisplay } from '../../styled/common'\n\nconst NewListContainer = styled.div`\n  margin: 2em;\n  display: flex;\n  flex-direction: column;\n`\n\nconst ButtonsContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`\n\nconst NewListInput = styled(Input)`\n  font-size: 2em;\n`\n\nconst NewListButton = styled(Button)`\n  font-size: 2em;\n`\n\nexport {\n  ButtonsContainer,\n  NewListContainer,\n  NewListInput,\n  NewListButton,\n  ErrorDisplay,\n}\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nimport useInput from '../../hooks/useInput'\nimport useValidator from '../../hooks/useValidator'\nimport { texts } from '../../constants'\n\nimport {\n  NewListButton,\n  ButtonsContainer,\n  NewListInput,\n  NewListContainer,\n  ErrorDisplay,\n} from './styles'\n\nconst useReset = (...args) => () => {\n  args.forEach(arg => arg.call())\n}\n\nconst NewListForm = ({ onConfirm, validate: validateFunc }) => {\n  const [focused, setFocused] = useState(false)\n  const [name, setName, resetName] = useInput('')\n  const [error, validate, resetError] = useValidator(validateFunc, onConfirm)\n  const reset = useReset(resetName, resetError)\n\n  return (\n    <NewListContainer>\n      {error && <ErrorDisplay>{error}</ErrorDisplay>}\n      <NewListInput\n        type=\"text\"\n        placeholder={texts.NewListPlaceholder}\n        value={name}\n        onChange={setName}\n        onFocus={() => setFocused(true)}\n        error={error}\n      />\n      {focused && (\n        <ButtonsContainer>\n          <NewListButton\n            onClick={() => {\n              if (validate(name)) {\n                reset()\n                setFocused(false)\n              }\n            }}>\n            {texts.ButtonOK}\n          </NewListButton>\n          <NewListButton\n            onClick={() => {\n              setFocused(false)\n              reset()\n            }}>\n            {texts.ButtonDecline}\n          </NewListButton>\n        </ButtonsContainer>\n      )}\n    </NewListContainer>\n  )\n}\n\nNewListForm.propTypes = {\n  onConfirm: PropTypes.func.isRequired,\n  validate: PropTypes.func.isRequired,\n}\n\nexport default NewListForm\n","import styled from 'styled-components'\nimport { Button, Input, ErrorDisplay } from '../../styled/common'\n\nconst NameContainer = styled.div`\n  display: flex;\n`\n\nconst EditButton = styled.span`\n  font-size: 1.5rem;\n  margin-bottom: 0.75em;\n  margin-left: 0.5em;\n  opacity: 0.75;\n  cursor: pointer;\n`\n\nconst ListContainer = styled.div`\n  width: 17em;\n  flex-shrink: 0;\n  margin: 2em;\n  padding: 2em;\n  border-radius: 1em;\n  background-color: rgba(245, 245, 237, 0.3);\n`\n\nconst ListName = styled.h2`\n  margin-top: 0;\n  margin-bottom: 0.75em;\n  font-size: 2.25em;\n`\n\nconst EditableListName = styled(Input)`\n  font-size: 2.25em;\n  margin-bottom: 0.75em;\n  width: 14rem;\n`\n\nconst ConfirmEditButton = styled(Button)`\n  font-size: 2em;\n  margin-bottom: 0.75em;\n`\n\nexport {\n  EditableListName,\n  ConfirmEditButton,\n  ListName,\n  ListContainer,\n  EditButton,\n  NameContainer,\n  ErrorDisplay,\n}\n","import React, { useState, Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport useValidator from '../../hooks/useValidator'\nimport { texts } from '../../constants'\nimport useInput from '../../hooks/useInput'\n\nimport {\n  ListContainer,\n  NameContainer,\n  EditButton,\n  ErrorDisplay,\n  EditableListName,\n  ListName,\n  ConfirmEditButton,\n} from './styles'\n\nconst List = ({ name, children, validateEdit, onUpdate }) => {\n  const [editMode, setEditMode] = useState(false)\n  const [nameValue, setName] = useInput(name)\n  const [error, validate, resetError] = useValidator(validateEdit, onUpdate)\n\n  return (\n    <ListContainer>\n      {error && <ErrorDisplay>{error}</ErrorDisplay>}\n      <NameContainer>\n        {editMode ? (\n          <Fragment>\n            <EditableListName value={nameValue} onChange={setName} />\n            <ConfirmEditButton\n              onClick={() => {\n                if (validate(nameValue)) {\n                  setEditMode(false)\n                  resetError()\n                }\n              }}>\n              {texts.ButtonOK}\n            </ConfirmEditButton>\n          </Fragment>\n        ) : (\n          <ListName>\n            {name}\n            <EditButton onClick={() => setEditMode(true)}>\n              {texts.ButtonEdit}\n            </EditButton>\n          </ListName>\n        )}\n      </NameContainer>\n      {children}\n    </ListContainer>\n  )\n}\n\nList.propTypes = {\n  children: PropTypes.element.isRequired,\n  name: PropTypes.string.isRequired,\n  onUpdate: PropTypes.func.isRequired,\n  validateEdit: PropTypes.func.isRequired,\n}\n\nexport default List\n","import styled from 'styled-components'\nimport { Button, Input, ErrorDisplay } from '../../styled/common'\nimport { colors } from '../../styled'\n\nconst NewTaskContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst ButtonsContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`\n\nconst NewTaskInput = styled(Input)`\n  font-size: 1.25em;\n  margin-top: 1em;\n  &::placeholder {\n    opacity: 0.75;\n    color: ${colors.dirtyWhite};\n  }\n`\n\nconst NewTaskButton = styled(Button)`\n  font-size: 1.5em;\n`\n\nexport {\n  NewTaskButton,\n  NewTaskInput,\n  NewTaskContainer,\n  ButtonsContainer,\n  ErrorDisplay,\n}\n","import React, { Fragment, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nimport useInput from '../../hooks/useInput'\nimport useValidator from '../../hooks/useValidator'\nimport { texts } from '../../constants'\n\nimport {\n  NewTaskButton,\n  NewTaskInput,\n  NewTaskContainer,\n  ButtonsContainer,\n  ErrorDisplay,\n} from './styles'\n\nconst noop = () => {}\n\nconst useReset = (...args) => () => {\n  args.forEach(arg => arg.call())\n}\n\nconst TaskForm = ({\n  onConfirm,\n  validate: validateFunc,\n  initialValues,\n  onResign = noop,\n}) => {\n  const isEdit = Boolean(initialValues)\n  const [focused, setFocused] = useState(isEdit)\n  const [title, setTitle, resetTitle] = useInput(\n    isEdit ? initialValues.title : ''\n  )\n  const [description, setDescription, resetDescription] = useInput(\n    isEdit ? initialValues.description : ''\n  )\n  const [error, validate, resetError] = useValidator(validateFunc, () =>\n    onConfirm({ title, description })\n  )\n  const reset = useReset(resetTitle, resetError, resetDescription)\n\n  return (\n    <NewTaskContainer>\n      {error && <ErrorDisplay>{error}</ErrorDisplay>}\n      <NewTaskInput\n        placeholder={\n          isEdit\n            ? texts.EditTaskTitlePlaceholder\n            : texts.NewTaskTitlePlaceholder\n        }\n        type=\"text\"\n        value={title}\n        onChange={setTitle}\n        onFocus={() => setFocused(true)}\n      />\n      {focused && (\n        <Fragment>\n          <NewTaskInput\n            placeholder={\n              isEdit\n                ? texts.EditTaskDescriptionPlaceholder\n                : texts.NewTaskDescriptionPlaceholder\n            }\n            as=\"textarea\"\n            value={description}\n            onChange={setDescription}\n          />\n          <ButtonsContainer>\n            <NewTaskButton onClick={() => validate(title) && reset()}>\n              {texts.ButtonOK}\n            </NewTaskButton>\n            <NewTaskButton\n              onClick={() => {\n                setFocused(false)\n                reset()\n                onResign()\n              }}>\n              {texts.ButtonDecline}\n            </NewTaskButton>\n          </ButtonsContainer>\n        </Fragment>\n      )}\n    </NewTaskContainer>\n  )\n}\n\nTaskForm.propTypes = {\n  onConfirm: PropTypes.func.isRequired,\n  validate: PropTypes.func.isRequired,\n  initialValues: PropTypes.object, // eslint-disable-line\n  onResign: PropTypes.func, // eslint-disable-line\n}\n\nexport default TaskForm\n","import styled from 'styled-components'\nimport { colors } from '../../styled'\nimport { Button } from '../../styled/common'\n\nconst Title = styled.h4`\n  color: ${colors.lightBlack};\n  margin: 0.5em 0;\n`\n\nconst Description = styled.p`\n  color: ${colors.lightBlack};\n  margin: 0.25em 0;\n`\n\nconst Container = styled.div`\n  position: relative;\n  background-color: ${colors.dirtyWhite};\n  border-radius: 0.5em;\n  margin: 0.5em 0;\n  padding: 0.5em 1.25em;\n`\n\nconst EditButton = styled(Button)`\n  font-size: 0.75em;\n  position: absolute;\n  top: 0.25em;\n  right: 0.25em;\n  color: ${colors.lightBlack};\n`\n\nexport { Title, Container, Description, EditButton }\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nimport TaskForm from '../TaskForm'\n\nimport { Title, Description, Container, EditButton } from './styles'\nimport { texts } from '../../constants'\n\nconst Task = ({ title, description = '', onUpdate, validate }) => {\n  const [editMode, setEditMode] = useState(false)\n\n  return editMode ? (\n    <TaskForm\n      onConfirm={values => onUpdate(values) && setEditMode(false)}\n      onResign={() => setEditMode(false)}\n      validate={validate}\n      initialValues={{ title, description }}\n    />\n  ) : (\n    <Container>\n      <Title>{title}</Title>\n      <Description>{description}</Description>\n      <EditButton onClick={() => setEditMode(true)}>\n        {texts.ButtonEdit}\n      </EditButton>\n    </Container>\n  )\n}\n\nTask.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string, // eslint-disable-line\n  onUpdate: PropTypes.func.isRequired,\n  validate: PropTypes.func.isRequired,\n}\n\nexport default Task\n","const createAction = (type, payload) => ({ type, payload })\n\nconst createActionWithError = (type, error) => ({\n  type,\n  error,\n})\n\nexport { createAction, createActionWithError }\n","import uuid from 'uuid/v4'\nimport { createAction } from '../../store/actions'\n\nconst actions = {\n  ADD_TASK: 'TASKS/ADD',\n  UPDATE_TASK: 'TASKS/UPDATE',\n}\n\nconst actionAddTask = (listId, values) =>\n  createAction(actions.ADD_TASK, { id: uuid(), listId, ...values })\n\nconst actionUpdateTask = (id, values) =>\n  createAction(actions.UPDATE_TASK, { id, ...values })\n\nexport { actions, actionAddTask, actionUpdateTask }\n","import { combineReducers } from 'redux'\nimport { createReducer } from 'redux-create-reducer'\nimport { actions } from './actions'\n\nconst tasksInitialState = {}\n\nconst byId = createReducer(tasksInitialState, {\n  [actions.ADD_TASK](state, { payload }) {\n    return {\n      ...state,\n      [payload.id]: payload,\n    }\n  },\n  [actions.UPDATE_TASK](state, { payload }) {\n    return {\n      ...state,\n      [payload.id]: {\n        ...state[payload.id],\n        ...payload,\n      },\n    }\n  },\n})\n\nexport default combineReducers({ byId })\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nimport Task from '../../components/Task'\nimport { texts } from '../../constants'\nimport TaskForm from '../../components/TaskForm'\nimport { actionAddTask, actionUpdateTask } from './actions'\nimport { selectTasksFromList } from './selectors'\n\nconst withConnect = connect(\n  selectTasksFromList,\n  (dispatch, { listId }) => ({\n    addNewTask: values => dispatch(actionAddTask(listId, values)),\n    updateTask: (id, values) => dispatch(actionUpdateTask(id, values)),\n  })\n)\n\nconst validateTaskTitle = value => {\n  if (!value) return texts.NewTaskErrorTitleEmpty\n  return null\n}\n\nconst Container = styled.div``\n\nconst Tasks = withConnect(({ tasks, addNewTask, updateTask }) => (\n  <Container>\n    {tasks.map(task => (\n      <Task\n        {...task}\n        key={task.id}\n        validate={validateTaskTitle}\n        onUpdate={values => updateTask(task.id, values)}\n      />\n    ))}\n    <TaskForm onConfirm={addNewTask} validate={validateTaskTitle} />\n  </Container>\n))\n\nTasks.propTypes = {\n  items: PropTypes.array.isRequired,\n  listId: PropTypes.string.isRequired,\n}\n\nexport { default as TasksReducer } from './reducer'\nexport { validateTaskTitle }\nexport default Tasks\n","const selectTasksFromList = (state, { listId }) => {\n  let tasks = []\n  const list = state.lists.byId[listId]\n  if (list) {\n    tasks = list.tasks.map(taskId => state.tasks.byId[taskId])\n  }\n  return { tasks }\n}\n\nexport { selectTasksFromList }\n","import uuid from 'uuid/v4'\nimport { createAction } from '../../store/actions'\n\nconst actions = {\n  ADD_LIST: 'LISTS/ADD',\n  UPDATE_LIST: 'LISTS/UPDATE',\n}\n\nconst actionAddList = name =>\n  createAction(actions.ADD_LIST, { id: uuid(), name })\n\nconst actionUpdateListName = (id, name) =>\n  createAction(actions.UPDATE_LIST, { id, name })\n\nexport { actions, actionAddList, actionUpdateListName }\n","import { combineReducers } from 'redux'\nimport { createReducer } from 'redux-create-reducer'\nimport { actions } from './actions'\nimport { actions as taskActions } from '../Tasks/actions'\n\nconst listsInitialState = {}\n\nconst listInitialState = ({ ...params }) => ({\n  tasks: [],\n  index: 0,\n  ...params,\n})\n\nconst byId = createReducer(listsInitialState, {\n  [actions.ADD_LIST](state, { payload }) {\n    return {\n      ...state,\n      [payload.id]: listInitialState(payload),\n    }\n  },\n  [actions.UPDATE_LIST](\n    state,\n    {\n      payload: { id, name },\n    }\n  ) {\n    return {\n      ...state,\n      [id]: {\n        ...state[id],\n        name,\n      },\n    }\n  },\n  [taskActions.ADD_TASK](\n    state,\n    {\n      payload: { listId, id: taskId },\n    }\n  ) {\n    return {\n      ...state,\n      [listId]: {\n        ...state[listId],\n        tasks: state[listId].tasks.concat(taskId),\n      },\n    }\n  },\n})\n\nexport default combineReducers({ byId })\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\n\nimport { texts } from '../../constants'\nimport NewListForm from '../../components/NewListForm'\nimport List from '../../components/List'\nimport Tasks from '../Tasks'\n\nimport { actionAddList, actionUpdateListName } from './actions'\n\nconst Container = styled.div`\n  display: flex;\n  align-items: flex-start;\n  overflow-x: scroll;\n  height: calc(100vh - 6.5em);\n`\n\nconst withConnect = connect(\n  state => ({ lists: state.lists.byId }),\n  dispatch => ({\n    addNewList: listName => dispatch(actionAddList(listName)),\n    updateListName: (id, listName) =>\n      dispatch(actionUpdateListName(id, listName)),\n  })\n)\n\nconst validateListName = value => {\n  if (!value) return texts.NewListErrorEmpty\n  if (value.length > 30) return texts.NewListErrorTooLong\n  return null\n}\n\nconst Lists = withConnect(({ lists, addNewList, updateListName }) => (\n  <Container>\n    {Object.keys(lists).map(id => {\n      const { name, tasks } = lists[id]\n      return (\n        <List\n          name={name}\n          key={id}\n          onUpdate={newName => updateListName(id, newName)}\n          validateEdit={validateListName}>\n          <Tasks items={tasks} listId={id} />\n        </List>\n      )\n    })}\n    <NewListForm onConfirm={addNewList} validate={validateListName} />\n  </Container>\n))\n\nexport { default as ListsReducer } from './reducer'\nexport { validateListName }\nexport default Lists\n","import { combineReducers } from 'redux'\nimport { ListsReducer } from '../containers/Lists'\nimport { TasksReducer } from '../containers/Tasks'\n\nexport default combineReducers({\n  lists: ListsReducer,\n  tasks: TasksReducer,\n})\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport thunk from 'redux-thunk'\nimport storage from 'redux-persist/lib/storage'\n\nimport reducer from './reducer'\n\nconst middlewares = [thunk]\nconst enhancers = [applyMiddleware(...middlewares)]\n\nconst persistConfig = {\n  key: 'trellike',\n  storage,\n}\n\n/* eslint-disable no-underscore-dangle */\nconst composeEnhancers =\n  process.env.NODE_ENV !== 'production' &&\n  typeof window === 'object' &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        shouldHotReload: false,\n      })\n    : compose\n/* eslint-enable */\n\nconst persistedReducer = persistReducer(persistConfig, reducer)\nconst store = createStore(persistedReducer, {}, composeEnhancers(...enhancers))\nconst persistor = persistStore(store)\n\nexport default store\nexport { persistor }","import React from 'react'\nimport styled from 'styled-components'\nimport { texts } from '../../constants'\n\nconst Title = styled.h1`\n  font-weight: 500;\n  font-size: 3em;\n  margin: 0.75em 0 0 1em;\n`\n\nconst TitleBold = styled.span`\n  font-weight: 700;\n`\n\nconst Header = () => (\n  <Title>\n    <TitleBold>{texts.AppNameFirstPart}</TitleBold>\n    {texts.AppNameSecondPart}\n  </Title>\n)\n\nexport default Header\n","import React from 'react'\nimport styled from 'styled-components'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nimport { persistor } from '../../store'\nimport { GlobalStyles } from '../../styled'\nimport Lists from '../Lists'\nimport Header from '../../components/Header'\n\nconst Container = styled.div``\n\nconst App = () => (\n  <Container>\n    <GlobalStyles />\n    <Header />\n    <PersistGate persistor={persistor}>\n      <Lists />\n    </PersistGate>\n  </Container>\n)\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport store from './store'\nimport App from './containers/App'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}